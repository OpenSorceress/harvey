#!/usr/bin/env node

var _ = require('underscore');
var async = require('async');
var commandLine = require('commander');
var path = require('path');
var reporterFactory = require('../lib/reporters/reporterFactory.js');
var Harvey = require('../index.js');
var harvey = new Harvey();
var color = require('cli-color');

var options = getCommandLineArguments();
var testData = loadJson(options.testFile || 'tests.json');
var config = loadJson(options.configFile);

var parallelTests = [];
var timeStarted = new Date();

if(options.tags) {
	testData.tests = filterTestsByTags(testData.tests, options.tags);
}

try {
	harvey.run(testData.tests, testData, config, function(error, suiteResult) {
		if(error) {
			console.log(color.red('Error: ' + error.message));
			process.exit(1);
		}
	
		var stats = getTestStats(suiteResult);

		var results = {
			"timeStarted": timeStarted,
			"timeEnded": new Date(),
			"testsExecuted": stats.testsExecuted,
			"testsFailed": stats.testsFailed,
			"testsSkipped": stats.testsSkipped,
			"validationsPerformed": stats.validationsPerformed,
			"validationsFailed": stats.validationsFailed,
			"testResults": suiteResult
		};

		if(options.reporter) {
			var reporter = reporterFactory.createReporter(options.reporter);
			reporter.reportResults(results, config, function() {
				process.exit(results.testsFailed);
			});
		}
	});
}
catch(error) {
	console.log(color.red(error));
	process.exit(1);	
}


function getCommandLineArguments() {

	commandLine
	.option('-t, --testFile <path>', 'The path to the file containing the tests')
	.option('-c, --configFile <path>', 'The path to the config file')
	.option('-r, --reporter <console|json|none>', 'Which reporter to use for displaying the results')
	.option('--tags <tags>', 'A comma delimited list of tags to use for filtering the tests to run')
	.parse(process.argv);

	return commandLine;
}

function loadJson(filename) {
	if (!filename) return {};

	filename = path.resolve(filename);

	try {
		var data = require(filename);
	}
	catch(e) {
		console.log(color.red("Unable to load file '" + filename + "'; " + e));
		process.exit(1);
	}

	return data;
}

function getTestStats(suiteResults) {
	var stats = {
		"testsExecuted": 0,
		"testsFailed": 0,
		"testsSkipped": 0,
		"validationsPerformed": 0,
		"validationsFailed": 0
	};

	var testResults = [];
	for(var i=0; i<suiteResults.suiteStepResults.length; i++) {
		if(_.isArray(suiteResults.suiteStepResults[i])) {
			testResults = suiteResults.suiteStepResults[i];
			break;
		}
	}
	
	for(var i=0; i<testResults.length; i++) {
		var testResult = testResults[i];
		if(testResult.skipped) {
			stats.testsSkipped++;
		}
		else {
			stats.testsExecuted++;
			if(!testResult.passed) stats.testsFailed++;

			for(var j=0; j<testResult.testStepResults.length; j++) {
				var testStepResult = testResult.testStepResults[j];

				for(var k=0; k<testStepResult.validationResults.length; k++) {
						var validationResult = testStepResult.validationResults[k];
						stats.validationsPerformed++;
						if(!validationResult.valid) stats.validationsFailed++;
				}

			}
		}
	}
	
	return stats;
}

function filterTestsByTags(tests, tags) {

	var filteredTests = [];

	for(var i=0; i<tests.length; i++) {
		//TODO: need to implement tags for real, but this will work for now
		if(tags.indexOf(tests[i].id) > -1) {
			filteredTests.push(tests[i]);
		}
	}

	return filteredTests;
}

